{"version":3,"sources":["images/logo.svg","components/Card.js","images/icon-dollar.svg","components/BillAmount.js","components/TipSelect.js","images/icon-person.svg","components/NoOfPeople.js","components/ResultCard.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","classes","className","children","BillAmount","src","dollar","alt","onChange","event","onBillChange","target","value","data","billTotal","type","TipSelect","selectedTip","tipPercentage","percentageSelectHandler","onPercentageSelect","id","onClick","onPercentageCustom","customValue","placeholder","NoOfPeople","person","onPeopleChange","peopleNo","ResultCard","parseFloat","parseInt","tipAmount","tipAmountRounded","Math","floor","split","isNaN","toFixed","onReset","App","useState","tipData","setTipData","customTip","setCustomTip","logo","billTotalInput","prevTipData","percentageInput","peopleNoInput","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12b0b732.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import React from 'react';\r\n\r\nimport './scss/Card.css';\r\n\r\nexport default function Card(props) {\r\n  const classes = 'card ' + props.className;\r\n\r\n  return <div className={classes}>{props.children}</div>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/icon-dollar.9f9be353.svg\";","import dollar from '../images/icon-dollar.svg';\r\nimport './scss/BillAmount.css';\r\n\r\nexport default function BillAmount(props) {\r\n  const billChangeHandler = (event) => {\r\n    props.onBillChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='bill-amount'>\r\n      <h2 className='section-title'>Bill</h2>\r\n      <img className='input-icon icon-dollar' src={dollar} alt='Dollar icon' />\r\n      <input\r\n        onChange={billChangeHandler}\r\n        value={props.data.billTotal}\r\n        className='input-bar'\r\n        type='text'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import './scss/TipSelect.css';\r\n\r\nexport default function TipSelect(props) {\r\n  let selectedTip = props.data.tipPercentage;\r\n\r\n  const percentageSelectHandler = (event) => {\r\n    props.onPercentageSelect(event.target.id);\r\n  };\r\n\r\n  const percentageChangeHandler = (event) => {\r\n    props.onPercentageSelect(event.target.value);\r\n    props.onPercentageCustom(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='tip-select'>\r\n      <h3 className='section-title'>Select Tip %</h3>\r\n      <ul className='tip-grid'>\r\n        <li\r\n          id='5'\r\n          onClick={percentageSelectHandler}\r\n          className={selectedTip === '5' && 'selected'}\r\n        >\r\n          5%\r\n        </li>\r\n        <li\r\n          id='10'\r\n          onClick={percentageSelectHandler}\r\n          className={selectedTip === '10' && 'selected'}\r\n        >\r\n          10%\r\n        </li>\r\n        <li\r\n          id='15'\r\n          onClick={percentageSelectHandler}\r\n          className={selectedTip === '15' && 'selected'}\r\n        >\r\n          15%\r\n        </li>\r\n        <li\r\n          id='25'\r\n          onClick={percentageSelectHandler}\r\n          className={selectedTip === '25' && 'selected'}\r\n        >\r\n          25%\r\n        </li>\r\n        <li\r\n          id='50'\r\n          onClick={percentageSelectHandler}\r\n          className={selectedTip === '50' && 'selected'}\r\n        >\r\n          50%\r\n        </li>\r\n        <input\r\n          onChange={percentageChangeHandler}\r\n          value={props.customValue}\r\n          className='custom-input-bar'\r\n          type='text'\r\n          placeholder='Custom'\r\n        />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/icon-person.65bfd204.svg\";","import React from 'react';\r\nimport person from '../images/icon-person.svg';\r\nimport './scss/NoOfPeople.css';\r\n\r\nexport default function NoOfPeople(props) {\r\n  const peopleChangeHandler = (event) => {\r\n    props.onPeopleChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='no-of-people'>\r\n      <h4 className='section-title'>Number of People</h4>\r\n      <img className='input-icon icon-person' src={person} alt='Person icon' />\r\n      <input\r\n        onChange={peopleChangeHandler}\r\n        value={props.data.peopleNo}\r\n        className='input-bar'\r\n        type='text'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import './scss/ResultCard.css';\r\n\r\nexport default function ResultCard(props) {\r\n  let billTotal = parseFloat(props.data.billTotal);\r\n  let tipPercentage = parseFloat(props.data.tipPercentage);\r\n  let peopleNo = parseInt(props.data.peopleNo);\r\n\r\n  let tipAmount = (billTotal * (tipPercentage / 100)) / peopleNo;\r\n  let tipAmountRounded = Math.floor(tipAmount * 100) / 100;\r\n  let split = billTotal / peopleNo + tipAmount;\r\n\r\n  const resetAllHandler = () => {\r\n    props.onReset();\r\n  };\r\n\r\n  return (\r\n    <div className='result-card'>\r\n      <div className='amount-container'>\r\n        <div className='amount-text'>\r\n          <div className='amount-total'>Tip Amount</div>\r\n          <div className='per-person'>/ person</div>\r\n        </div>\r\n        <div className='amount-data'>\r\n          {'$'}\r\n          {!isNaN(tipAmount) ? tipAmountRounded : ''}\r\n        </div>\r\n      </div>\r\n      <div className='amount-container'>\r\n        <div className='amount-text'>\r\n          <div className='amount-total'>Total</div>\r\n          <div className='per-person'>/ person</div>\r\n        </div>\r\n        <div className='amount-data'>\r\n          {'$'}\r\n          {!isNaN(split) ? split.toFixed(2) : ''}\r\n        </div>\r\n      </div>\r\n      <div onClick={resetAllHandler} className='reset-btn'>\r\n        RESET\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport logo from './images/logo.svg';\r\nimport Card from './components/Card';\r\nimport BillAmount from './components/BillAmount';\r\nimport TipSelect from './components/TipSelect';\r\nimport NoOfPeople from './components/NoOfPeople';\r\nimport ResultCard from './components/ResultCard';\r\n\r\nfunction App() {\r\n  const [tipData, setTipData] = useState({\r\n    billTotal: '',\r\n    tipPercentage: '',\r\n    peopleNo: '',\r\n  });\r\n\r\n  // Only used to reset the custom input\r\n  const [customTip, setCustomTip] = useState('');\r\n\r\n  const billTotalChange = (billTotalInput) => {\r\n    setTipData((prevTipData) => {\r\n      return { ...prevTipData, billTotal: billTotalInput };\r\n    });\r\n  };\r\n\r\n  const tipPercentageSelect = (percentageInput) => {\r\n    setTipData((prevTipData) => {\r\n      return { ...prevTipData, tipPercentage: percentageInput };\r\n    });\r\n  };\r\n\r\n  const tipPercentageCustom = (customValue) => {\r\n    setCustomTip(customValue);\r\n  };\r\n\r\n  const peopleChange = (peopleNoInput) => {\r\n    setTipData((prevTipData) => {\r\n      return { ...prevTipData, peopleNo: peopleNoInput };\r\n    });\r\n  };\r\n\r\n  const resetAll = () => {\r\n    setTipData({\r\n      billTotal: '',\r\n      tipPercentage: '',\r\n      peopleNo: '',\r\n    });\r\n    setCustomTip('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <img className='main-logo' src={logo} alt='Logo' />\r\n      <Card className='main-card'>\r\n        <div className=''>\r\n          <BillAmount onBillChange={billTotalChange} data={tipData} />\r\n          <TipSelect\r\n            onPercentageSelect={tipPercentageSelect}\r\n            data={tipData}\r\n            customValue={customTip}\r\n            onPercentageCustom={tipPercentageCustom}\r\n          />\r\n          <NoOfPeople onPeopleChange={peopleChange} data={tipData} />\r\n        </div>\r\n        <ResultCard data={tipData} onReset={resetAll} />\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}